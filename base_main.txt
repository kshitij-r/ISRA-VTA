int main(int argc, const char *argv[]) {
unsigned int opcode;
unsigned int y_size, x_size;
uint8_t DRAM[64];
uint8_t DRAM_2[64];
uint8_t DRAM_3[64];
uint8_t DRAM_4[64];
uint8_t DRAM_5[64];
uint8_t out_mem[4][1][16];
ap_uint<80> uop_q[4];
unsigned int sram_base_scalar;
int sram_base ;
unsigned int dram_base_scalar;
int dram_base ;
unsigned int x_stride; 
ap_uint<10> uop_id[1];
ap_uint<8> uop_queue[40];
ap_uint<13> num_uop[1];
sram_base_scalar = 0;
dram_base_scalar =0;
x_stride= 0 ; 
opcode =1;
x_size = 4;
y_size = 1;
uop_id[0] = 0;
sram_base  =0 ;
dram_base =0;
for ( int i = 0; i<64; i++) {
DRAM[i] = 0;
}
for ( int i = 0; i<64; i++) {
DRAM_3[i] = 0;
}
for ( int i = 0; i<64; i++) {
DRAM_2[i] = 0;
}
for ( int i = 0; i<64; i++) {
DRAM_4[i] = 0;
}
for ( int i = 0; i<64; i++) {
DRAM_5[i] = 0;
}
int u = 1;
for (int i = 0; i < x_size; ++i) {
for (int j = 0; j < y_size; ++j) {
for (int k = 0; k < 16; ++k) {
out_mem[i][j][k] = u;
u++;
}
}
}
for (int i =0; i< 4; i++){
uop_q[i] = 0 ;
}
for (int i =0; i< 40; i++){
uop_queue[i] = 0 ;
}
num_uop[0] = 0;
opcode = 1;
y_size = 1;
x_size =4;
klee_make_symbolic(&opcode, sizeof(opcode), "opcode");
klee_make_symbolic(&y_size, sizeof(y_size), "y_size");
klee_make_symbolic(&x_size, sizeof(x_size), "x_size");
if((opcode==1)&&(y_size==1)&&(x_size==4)){
instr instruction = {opcode, sram_base_scalar, dram_base_scalar, x_stride,  y_size,x_size};
interpreter1(instruction, DRAM, out_mem );
store_decoder(instruction, uop_id, uop_queue, num_uop, uop_q ,  DRAM, out_mem);
while (num_uop[0] > 0) {
ap_uint<79> uinstr = uop_q[0];
if (num_uop[0] > 0) { 
for (unsigned int i = 0; i < num_uop[0] -1 ; i++) {
uop_q[i] = uop_q[i+1];  
}
num_uop[0] = num_uop[0] - 1;
}
ap_uint<79> uinstruction = uinstr;
interpreter2(uinstruction, DRAM_2, out_mem);
uinstr_decoder_per_u(uinstruction, sram_base, dram_base);
interpreter3(sram_base, dram_base, DRAM_3, out_mem);
core(sram_base, dram_base, DRAM_4, out_mem);
interpreter4(dram_base, DRAM_4, DRAM_5);
}
int k = 0;
for (int i = 0; i < X_SIZE; i++) {
for (int j = 0; j < Y_SIZE; j++) {
for (int m = 0; m < 16; m++) {
assert (DRAM[k] == DRAM_2[k]); 
assert (DRAM_2[k] == DRAM_3[k]); 
assert (DRAM_3[k] == DRAM_5[k]); 
k++;
}}}}
return 0;
}

